@startuml
!theme plain
skinparam backgroundColor white
skinparam ParticipantPadding 20
skinparam BoxPadding 10

actor "User" as user
participant "Service\nwith ammoclient" as client
queue "Kafka" as kafka
box "Ammo Collector" #LightBlue    
    participant "Collector Service\n(REST/gRPC)" as collector
end box
database "PostgreSQL" as postgres
database "S3" as s3

== Setup Collection Task ==
user -> collector: Create task with collection criteria
collector -> postgres: Create collection
collector --> user: Return collection ID

== Request Collection ==
client -> kafka: GRPC/HTTP request\njson body
collector -> kafka: Consume requests
collector -> collector: Check request against\ncollection criteria
collector -> postgres: Save matching requests\nlinked to collection


== Collections Completion ==
collector -> postgres: Fetch active collections
collector -> collector: Check collections completion\ncriteria
collector -> postgres: Try acquire distributed\n(postgresql advisory) lock\non collection ID
collector -> postgres: Fetch collected requests
collector -> s3: Save as zip archive
collector -> postgres: Update collection status

== Background Operations ==
collector -> postgres: Try acquire distributed lock\non clean up
collector -> postgres: Cleanup of old requests
collector -> s3: Cleanup of old archives

== Collection Status & Results ==
user -> collector: Check collection status, collections list, etc.
collector -> postgres: Query collection status
collector --> user: Return status and s3 URL

user -> collector: Request collection archive by ID
collector -> s3: Query collection archive
collector --> user: Return collection archive
user --> s3: Direct request collection archive (if available)

@enduml
