// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source interface.go -destination interface_mock.go -package cache
//

// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	reflect "reflect"

	entity "github.com/n-r-w/ammo-collector/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockICollectionReader is a mock of ICollectionReader interface.
type MockICollectionReader struct {
	ctrl     *gomock.Controller
	recorder *MockICollectionReaderMockRecorder
}

// MockICollectionReaderMockRecorder is the mock recorder for MockICollectionReader.
type MockICollectionReaderMockRecorder struct {
	mock *MockICollectionReader
}

// NewMockICollectionReader creates a new mock instance.
func NewMockICollectionReader(ctrl *gomock.Controller) *MockICollectionReader {
	mock := &MockICollectionReader{ctrl: ctrl}
	mock.recorder = &MockICollectionReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollectionReader) EXPECT() *MockICollectionReaderMockRecorder {
	return m.recorder
}

// GetCollections mocks base method.
func (m *MockICollectionReader) GetCollections(ctx context.Context, filter entity.CollectionFilter) ([]entity.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollections", ctx, filter)
	ret0, _ := ret[0].([]entity.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollections indicates an expected call of GetCollections.
func (mr *MockICollectionReaderMockRecorder) GetCollections(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollections", reflect.TypeOf((*MockICollectionReader)(nil).GetCollections), ctx, filter)
}
