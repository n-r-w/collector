// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source interface.go -destination interface_mock.go -package apiprocessor
//

// Package apiprocessor is a generated GoMock package.
package apiprocessor

import (
	context "context"
	reflect "reflect"

	entity "github.com/n-r-w/collector/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockICollectionCreator is a mock of ICollectionCreator interface.
type MockICollectionCreator struct {
	ctrl     *gomock.Controller
	recorder *MockICollectionCreatorMockRecorder
}

// MockICollectionCreatorMockRecorder is the mock recorder for MockICollectionCreator.
type MockICollectionCreatorMockRecorder struct {
	mock *MockICollectionCreator
}

// NewMockICollectionCreator creates a new mock instance.
func NewMockICollectionCreator(ctrl *gomock.Controller) *MockICollectionCreator {
	mock := &MockICollectionCreator{ctrl: ctrl}
	mock.recorder = &MockICollectionCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollectionCreator) EXPECT() *MockICollectionCreatorMockRecorder {
	return m.recorder
}

// CreateCollection mocks base method.
func (m *MockICollectionCreator) CreateCollection(ctx context.Context, task entity.Task) (entity.CollectionID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollection", ctx, task)
	ret0, _ := ret[0].(entity.CollectionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockICollectionCreatorMockRecorder) CreateCollection(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockICollectionCreator)(nil).CreateCollection), ctx, task)
}

// MockICollectionReader is a mock of ICollectionReader interface.
type MockICollectionReader struct {
	ctrl     *gomock.Controller
	recorder *MockICollectionReaderMockRecorder
}

// MockICollectionReaderMockRecorder is the mock recorder for MockICollectionReader.
type MockICollectionReaderMockRecorder struct {
	mock *MockICollectionReader
}

// NewMockICollectionReader creates a new mock instance.
func NewMockICollectionReader(ctrl *gomock.Controller) *MockICollectionReader {
	mock := &MockICollectionReader{ctrl: ctrl}
	mock.recorder = &MockICollectionReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollectionReader) EXPECT() *MockICollectionReaderMockRecorder {
	return m.recorder
}

// GetCollection mocks base method.
func (m *MockICollectionReader) GetCollection(ctx context.Context, id entity.CollectionID) (entity.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection", ctx, id)
	ret0, _ := ret[0].(entity.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockICollectionReaderMockRecorder) GetCollection(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockICollectionReader)(nil).GetCollection), ctx, id)
}

// GetCollections mocks base method.
func (m *MockICollectionReader) GetCollections(ctx context.Context, filter entity.CollectionFilter) ([]entity.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollections", ctx, filter)
	ret0, _ := ret[0].([]entity.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollections indicates an expected call of GetCollections.
func (mr *MockICollectionReaderMockRecorder) GetCollections(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollections", reflect.TypeOf((*MockICollectionReader)(nil).GetCollections), ctx, filter)
}

// MockICollectionUpdater is a mock of ICollectionUpdater interface.
type MockICollectionUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockICollectionUpdaterMockRecorder
}

// MockICollectionUpdaterMockRecorder is the mock recorder for MockICollectionUpdater.
type MockICollectionUpdaterMockRecorder struct {
	mock *MockICollectionUpdater
}

// NewMockICollectionUpdater creates a new mock instance.
func NewMockICollectionUpdater(ctrl *gomock.Controller) *MockICollectionUpdater {
	mock := &MockICollectionUpdater{ctrl: ctrl}
	mock.recorder = &MockICollectionUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollectionUpdater) EXPECT() *MockICollectionUpdaterMockRecorder {
	return m.recorder
}

// UpdateStatus mocks base method.
func (m *MockICollectionUpdater) UpdateStatus(ctx context.Context, collectionID entity.CollectionID, status entity.CollectionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, collectionID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockICollectionUpdaterMockRecorder) UpdateStatus(ctx, collectionID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockICollectionUpdater)(nil).UpdateStatus), ctx, collectionID, status)
}

// MockIResultGetter is a mock of IResultGetter interface.
type MockIResultGetter struct {
	ctrl     *gomock.Controller
	recorder *MockIResultGetterMockRecorder
}

// MockIResultGetterMockRecorder is the mock recorder for MockIResultGetter.
type MockIResultGetterMockRecorder struct {
	mock *MockIResultGetter
}

// NewMockIResultGetter creates a new mock instance.
func NewMockIResultGetter(ctrl *gomock.Controller) *MockIResultGetter {
	mock := &MockIResultGetter{ctrl: ctrl}
	mock.recorder = &MockIResultGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIResultGetter) EXPECT() *MockIResultGetterMockRecorder {
	return m.recorder
}

// GetResult mocks base method.
func (m *MockIResultGetter) GetResult(ctx context.Context, resultID entity.ResultID) (<-chan entity.RequestChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResult", ctx, resultID)
	ret0, _ := ret[0].(<-chan entity.RequestChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResult indicates an expected call of GetResult.
func (mr *MockIResultGetterMockRecorder) GetResult(ctx, resultID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockIResultGetter)(nil).GetResult), ctx, resultID)
}
