// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source interface.go -destination interface_mock.go -package cleaner
//

// Package cleaner is a generated GoMock package.
package cleaner

import (
	context "context"
	reflect "reflect"

	entity "github.com/n-r-w/collector/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockILocker is a mock of ILocker interface.
type MockILocker struct {
	ctrl     *gomock.Controller
	recorder *MockILockerMockRecorder
}

// MockILockerMockRecorder is the mock recorder for MockILocker.
type MockILockerMockRecorder struct {
	mock *MockILocker
}

// NewMockILocker creates a new mock instance.
func NewMockILocker(ctrl *gomock.Controller) *MockILocker {
	mock := &MockILocker{ctrl: ctrl}
	mock.recorder = &MockILockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILocker) EXPECT() *MockILockerMockRecorder {
	return m.recorder
}

// TryLockFunc mocks base method.
func (m *MockILocker) TryLockFunc(ctx context.Context, key entity.LockKey, fn func(context.Context) error) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLockFunc", ctx, key, fn)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryLockFunc indicates an expected call of TryLockFunc.
func (mr *MockILockerMockRecorder) TryLockFunc(ctx, key, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLockFunc", reflect.TypeOf((*MockILocker)(nil).TryLockFunc), ctx, key, fn)
}

// MockIDatabaseCleaner is a mock of IDatabaseCleaner interface.
type MockIDatabaseCleaner struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseCleanerMockRecorder
}

// MockIDatabaseCleanerMockRecorder is the mock recorder for MockIDatabaseCleaner.
type MockIDatabaseCleanerMockRecorder struct {
	mock *MockIDatabaseCleaner
}

// NewMockIDatabaseCleaner creates a new mock instance.
func NewMockIDatabaseCleaner(ctrl *gomock.Controller) *MockIDatabaseCleaner {
	mock := &MockIDatabaseCleaner{ctrl: ctrl}
	mock.recorder = &MockIDatabaseCleanerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatabaseCleaner) EXPECT() *MockIDatabaseCleanerMockRecorder {
	return m.recorder
}

// CleanDatabase mocks base method.
func (m *MockIDatabaseCleaner) CleanDatabase(ctx context.Context, collectionIDs []entity.CollectionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanDatabase", ctx, collectionIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanDatabase indicates an expected call of CleanDatabase.
func (mr *MockIDatabaseCleanerMockRecorder) CleanDatabase(ctx, collectionIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanDatabase", reflect.TypeOf((*MockIDatabaseCleaner)(nil).CleanDatabase), ctx, collectionIDs)
}

// MockIObjectStorageCleaner is a mock of IObjectStorageCleaner interface.
type MockIObjectStorageCleaner struct {
	ctrl     *gomock.Controller
	recorder *MockIObjectStorageCleanerMockRecorder
}

// MockIObjectStorageCleanerMockRecorder is the mock recorder for MockIObjectStorageCleaner.
type MockIObjectStorageCleanerMockRecorder struct {
	mock *MockIObjectStorageCleaner
}

// NewMockIObjectStorageCleaner creates a new mock instance.
func NewMockIObjectStorageCleaner(ctrl *gomock.Controller) *MockIObjectStorageCleaner {
	mock := &MockIObjectStorageCleaner{ctrl: ctrl}
	mock.recorder = &MockIObjectStorageCleanerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIObjectStorageCleaner) EXPECT() *MockIObjectStorageCleanerMockRecorder {
	return m.recorder
}

// CleanObjectStorage mocks base method.
func (m *MockIObjectStorageCleaner) CleanObjectStorage(ctx context.Context, resultIDs []entity.ResultID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanObjectStorage", ctx, resultIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanObjectStorage indicates an expected call of CleanObjectStorage.
func (mr *MockIObjectStorageCleanerMockRecorder) CleanObjectStorage(ctx, resultIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanObjectStorage", reflect.TypeOf((*MockIObjectStorageCleaner)(nil).CleanObjectStorage), ctx, resultIDs)
}

// MockICollectionReader is a mock of ICollectionReader interface.
type MockICollectionReader struct {
	ctrl     *gomock.Controller
	recorder *MockICollectionReaderMockRecorder
}

// MockICollectionReaderMockRecorder is the mock recorder for MockICollectionReader.
type MockICollectionReaderMockRecorder struct {
	mock *MockICollectionReader
}

// NewMockICollectionReader creates a new mock instance.
func NewMockICollectionReader(ctrl *gomock.Controller) *MockICollectionReader {
	mock := &MockICollectionReader{ctrl: ctrl}
	mock.recorder = &MockICollectionReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollectionReader) EXPECT() *MockICollectionReaderMockRecorder {
	return m.recorder
}

// GetCollections mocks base method.
func (m *MockICollectionReader) GetCollections(ctx context.Context, filter entity.CollectionFilter) ([]entity.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollections", ctx, filter)
	ret0, _ := ret[0].([]entity.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollections indicates an expected call of GetCollections.
func (mr *MockICollectionReaderMockRecorder) GetCollections(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollections", reflect.TypeOf((*MockICollectionReader)(nil).GetCollections), ctx, filter)
}
