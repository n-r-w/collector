// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source interface.go -destination interface_mock.go -package reqprocessor
//

// Package reqprocessor is a generated GoMock package.
package reqprocessor

import (
	context "context"
	reflect "reflect"

	entity "github.com/n-r-w/collector/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIRequestStorer is a mock of IRequestStorer interface.
type MockIRequestStorer struct {
	ctrl     *gomock.Controller
	recorder *MockIRequestStorerMockRecorder
}

// MockIRequestStorerMockRecorder is the mock recorder for MockIRequestStorer.
type MockIRequestStorerMockRecorder struct {
	mock *MockIRequestStorer
}

// NewMockIRequestStorer creates a new mock instance.
func NewMockIRequestStorer(ctrl *gomock.Controller) *MockIRequestStorer {
	mock := &MockIRequestStorer{ctrl: ctrl}
	mock.recorder = &MockIRequestStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRequestStorer) EXPECT() *MockIRequestStorerMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockIRequestStorer) Store(ctx context.Context, requests []entity.RequestContent, toStore []entity.MatchResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, requests, toStore)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockIRequestStorerMockRecorder) Store(ctx, requests, toStore any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockIRequestStorer)(nil).Store), ctx, requests, toStore)
}

// MockICollectionCacher is a mock of ICollectionCacher interface.
type MockICollectionCacher struct {
	ctrl     *gomock.Controller
	recorder *MockICollectionCacherMockRecorder
}

// MockICollectionCacherMockRecorder is the mock recorder for MockICollectionCacher.
type MockICollectionCacherMockRecorder struct {
	mock *MockICollectionCacher
}

// NewMockICollectionCacher creates a new mock instance.
func NewMockICollectionCacher(ctrl *gomock.Controller) *MockICollectionCacher {
	mock := &MockICollectionCacher{ctrl: ctrl}
	mock.recorder = &MockICollectionCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollectionCacher) EXPECT() *MockICollectionCacherMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockICollectionCacher) Get() []entity.Collection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]entity.Collection)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockICollectionCacherMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICollectionCacher)(nil).Get))
}
