// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/google/wire"
	"github.com/n-r-w/ammo-collector/internal/config"
	"github.com/n-r-w/ammo-collector/internal/controller/consumer"
	"github.com/n-r-w/ammo-collector/internal/controller/handlers"
	"github.com/n-r-w/ammo-collector/internal/repository/s3"
	"github.com/n-r-w/ammo-collector/internal/repository/sql/cleaner"
	"github.com/n-r-w/ammo-collector/internal/repository/sql/colmanager"
	"github.com/n-r-w/ammo-collector/internal/repository/sql/locker"
	"github.com/n-r-w/ammo-collector/internal/repository/sql/reqprocessor"
	"github.com/n-r-w/ammo-collector/internal/repository/sql/resgetter"
	"github.com/n-r-w/ammo-collector/internal/telemetry"
	"github.com/n-r-w/ammo-collector/internal/usecases/apiprocessor"
	"github.com/n-r-w/ammo-collector/internal/usecases/cache"
	cleaner2 "github.com/n-r-w/ammo-collector/internal/usecases/cleaner"
	"github.com/n-r-w/ammo-collector/internal/usecases/finalizer"
	reqprocessor2 "github.com/n-r-w/ammo-collector/internal/usecases/reqprocessor"
	"github.com/n-r-w/grpcsrv"
	"github.com/n-r-w/pgh/v2/px/db"
	"github.com/n-r-w/pgh/v2/txmgr"
)

// Injectors from wire.go:

// InitializeContainer initializes the dependency injection container.
func InitializeContainer(ctx context.Context, cfg *config.Config, metrics telemetry.IMetrics, dbOpts []db.Option, grpcOpts []grpcsrv.Option) (*Container, error) {
	pxDB := db.New(dbOpts...)
	transactionManager := txmgr.New(pxDB, pxDB)
	service, err := cleaner.New(cfg, pxDB, transactionManager)
	if err != nil {
		return nil, err
	}
	colmanagerService, err := colmanager.New(cfg, pxDB)
	if err != nil {
		return nil, err
	}
	lockerService, err := locker.New(cfg, pxDB, transactionManager)
	if err != nil {
		return nil, err
	}
	reqprocessorService, err := reqprocessor.New(cfg, pxDB, transactionManager)
	if err != nil {
		return nil, err
	}
	resgetterService, err := resgetter.New(cfg, pxDB, transactionManager)
	if err != nil {
		return nil, err
	}
	cacheService, err := cache.New(cfg, colmanagerService)
	if err != nil {
		return nil, err
	}
	s3Service, err := s3.New(cfg)
	if err != nil {
		return nil, err
	}
	finalizerService, err := finalizer.New(cfg, transactionManager, colmanagerService, colmanagerService, resgetterService, s3Service, resgetterService, lockerService)
	if err != nil {
		return nil, err
	}
	apiprocessorService := apiprocessor.New(colmanagerService, colmanagerService, colmanagerService, s3Service, transactionManager)
	service2 := reqprocessor2.New(reqprocessorService, cacheService)
	cleanerService, err := cleaner2.New(cfg, lockerService, colmanagerService, service, s3Service)
	if err != nil {
		return nil, err
	}
	handlersService := handlers.New(cfg, apiprocessorService, apiprocessorService)
	v := provideGRPCInitializers(handlersService)
	grpcsrvService := grpcsrv.New(ctx, v, grpcOpts...)
	consumerService, err := consumer.New(ctx, cfg, service2, metrics)
	if err != nil {
		return nil, err
	}
	container := &Container{
		Config:                     cfg,
		Database:                   pxDB,
		CleanerRepository:          service,
		ColManagerRepository:       colmanagerService,
		LockerRepository:           lockerService,
		RequestProcessorRepository: reqprocessorService,
		ResGetterRepository:        resgetterService,
		CacheService:               cacheService,
		FinalizerService:           finalizerService,
		APIProcessorService:        apiprocessorService,
		RequestProcessorService:    service2,
		CleanupService:             cleanerService,
		GRPCServer:                 grpcsrvService,
		GRPCHandlers:               handlersService,
		KafkaConsumer:              consumerService,
		S3:                         s3Service,
	}
	return container, nil
}

// wire.go:

// Container holds all the dependencies.
type Container struct {
	Config                     *config.Config
	Database                   *db.PxDB
	CleanerRepository          *cleaner.Service
	ColManagerRepository       *colmanager.Service
	LockerRepository           *locker.Service
	RequestProcessorRepository *reqprocessor.Service
	ResGetterRepository        *resgetter.Service
	CacheService               *cache.Service
	FinalizerService           *finalizer.Service
	APIProcessorService        *apiprocessor.Service
	RequestProcessorService    *reqprocessor2.Service
	CleanupService             *cleaner2.Service
	GRPCServer                 *grpcsrv.Service
	GRPCHandlers               *handlers.Service
	KafkaConsumer              *consumer.Service
	S3                         *s3.Service
}

// sqlRepositorySet provides SQL repository and its interface bindings.
var sqlRepositorySet = wire.NewSet(resgetter.New, wire.Bind(new(finalizer.IResultChanGetter), new(*resgetter.Service)), wire.Bind(new(finalizer.ICollectionResultUpdater), new(*resgetter.Service)), reqprocessor.New, wire.Bind(new(reqprocessor2.IRequestStorer), new(*reqprocessor.Service)), locker.New, wire.Bind(new(finalizer.ILocker), new(*locker.Service)), wire.Bind(new(cleaner2.ILocker), new(*locker.Service)), cleaner.New, wire.Bind(new(cleaner2.IDatabaseCleaner), new(*cleaner.Service)), colmanager.New, wire.Bind(new(apiprocessor.ICollectionCreator), new(*colmanager.Service)), wire.Bind(new(finalizer.IStatusChanger), new(*colmanager.Service)), wire.Bind(new(apiprocessor.ICollectionReader), new(*colmanager.Service)), wire.Bind(new(apiprocessor.ICollectionUpdater), new(*colmanager.Service)), wire.Bind(new(finalizer.ICollectionReader), new(*colmanager.Service)), wire.Bind(new(cache.ICollectionReader), new(*colmanager.Service)), wire.Bind(new(cleaner2.ICollectionReader), new(*colmanager.Service)))

// DatabaseSet is a Wire provider set that includes all database dependencies.
var databaseSet = wire.NewSet(db.New, wire.Bind(new(db.IConnectionGetter), new(*db.PxDB)), wire.Bind(new(txmgr.ITransactionBeginner), new(*db.PxDB)), wire.Bind(new(txmgr.ITransactionInformer), new(*db.PxDB)), txmgr.New, wire.Bind(new(txmgr.ITransactionManager), new(*txmgr.TransactionManager)))

// s3Set provides S3 storage and its interface bindings.
var s3Set = wire.NewSet(s3.New, wire.Bind(new(finalizer.IResultChanSaver), new(*s3.Service)), wire.Bind(new(apiprocessor.IResultGetter), new(*s3.Service)), wire.Bind(new(cleaner2.IObjectStorageCleaner), new(*s3.Service)))

// grpcServerSet is a Wire provider set that includes all grpc dependencies.
var grpcServerSet = wire.NewSet(handlers.New, provideGRPCInitializers, grpcsrv.New)

// kafkaConsumerSet is a Wire provider set that includes all Kafka consumer dependencies.
var kafkaConsumerSet = wire.NewSet(consumer.New)

// provideGRPCInitializers provides a Wire provider set that includes all gRPC initializers.
func provideGRPCInitializers(handlers2 *handlers.Service) []grpcsrv.IGRPCInitializer {
	return []grpcsrv.IGRPCInitializer{handlers2}
}

// usecasesSet is a Wire provider set that includes all usecases from this package.
var usecasesSet = wire.NewSet(cache.New, wire.Bind(new(reqprocessor2.ICollectionCacher), new(*cache.Service)), finalizer.New, cleaner2.New, reqprocessor2.New, wire.Bind(new(consumer.IHandlers), new(*reqprocessor2.Service)), apiprocessor.New, wire.Bind(new(handlers.ICollectionManager), new(*apiprocessor.Service)), wire.Bind(new(handlers.IResultGetter), new(*apiprocessor.Service)))
