package dbmodel

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	_ "github.com/jackc/pgx/v5/stdlib" // pgx postgres driver
)

// RequestCollection represents a row from 'public.request_collections'.
type RequestCollection struct {
	RequestID    int64 `json:"request_id" db:"request_id"`       // request_id
	CollectionID int64 `json:"collection_id" db:"collection_id"` // collection_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [RequestCollection] exists in the database.
func (rc *RequestCollection) Exists() bool {
	return rc._exists
}

// Deleted returns true when the [RequestCollection] has been marked for deletion
// from the database.
func (rc *RequestCollection) Deleted() bool {
	return rc._deleted
}

// Insert inserts the [RequestCollection] to the database.
func (rc *RequestCollection) Insert(ctx context.Context, db DB) error {
	switch {
	case rc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case rc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.request_collections (` +
		`request_id, collection_id` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, rc.RequestID, rc.CollectionID)
	if _, err := db.Exec(ctx, sqlstr, rc.RequestID, rc.CollectionID); err != nil {
		return logerror(err)
	}
	// set exists
	rc._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [RequestCollection] from the database.
func (rc *RequestCollection) Delete(ctx context.Context, db DB) error {
	switch {
	case !rc._exists: // doesn't exist
		return nil
	case rc._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.request_collections ` +
		`WHERE request_id = $1 AND collection_id = $2`
	// run
	logf(sqlstr, rc.RequestID, rc.CollectionID)
	if _, err := db.Exec(ctx, sqlstr, rc.RequestID, rc.CollectionID); err != nil {
		return logerror(err)
	}
	// set deleted
	rc._deleted = true
	return nil
}

// RequestCollectionsByCollectionID retrieves a row from 'public.request_collections' as a [RequestCollection].
//
// Generated from index 'idx_request_collections_collection_id'.
func RequestCollectionsByCollectionID(ctx context.Context, db DB, collectionID int64) ([]*RequestCollection, error) {
	// query
	const sqlstr = `SELECT ` +
		`request_id, collection_id ` +
		`FROM public.request_collections ` +
		`WHERE collection_id = $1`
	// run
	logf(sqlstr, collectionID)
	rows, err := db.Query(ctx, sqlstr, collectionID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*RequestCollection
	for rows.Next() {
		rc := RequestCollection{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&rc.RequestID, &rc.CollectionID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &rc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// RequestCollectionsByCollectionIDs retrieves a row from 'public.request_collections' as a [RequestCollection].
//
// Generated from index 'idx_request_collections_collection_id'.
func RequestCollectionsByCollectionIDs(ctx context.Context, db DB, collectionID []int64) ([]*RequestCollection, error) {
	// query
	const sqlstr = `SELECT ` +
		`request_id, collection_id ` +
		`FROM public.request_collections ` +
		`WHERE collection_id = ANY($1) ` +
		`ORDER BY collection_id`
	// run
	logf(sqlstr, collectionID)

	rows, err := db.Query(ctx, sqlstr, collectionID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*RequestCollection
	for rows.Next() {
		rc := RequestCollection{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&rc.RequestID, &rc.CollectionID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &rc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// RequestCollectionsByRequestID retrieves a row from 'public.request_collections' as a [RequestCollection].
//
// Generated from index 'idx_request_collections_request_id'.
func RequestCollectionsByRequestID(ctx context.Context, db DB, requestID int64) ([]*RequestCollection, error) {
	// query
	const sqlstr = `SELECT ` +
		`request_id, collection_id ` +
		`FROM public.request_collections ` +
		`WHERE request_id = $1`
	// run
	logf(sqlstr, requestID)
	rows, err := db.Query(ctx, sqlstr, requestID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*RequestCollection
	for rows.Next() {
		rc := RequestCollection{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&rc.RequestID, &rc.CollectionID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &rc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// RequestCollectionsByRequestIDs retrieves a row from 'public.request_collections' as a [RequestCollection].
//
// Generated from index 'idx_request_collections_request_id'.
func RequestCollectionsByRequestIDs(ctx context.Context, db DB, requestID []int64) ([]*RequestCollection, error) {
	// query
	const sqlstr = `SELECT ` +
		`request_id, collection_id ` +
		`FROM public.request_collections ` +
		`WHERE request_id = ANY($1) ` +
		`ORDER BY request_id`
	// run
	logf(sqlstr, requestID)

	rows, err := db.Query(ctx, sqlstr, requestID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*RequestCollection
	for rows.Next() {
		rc := RequestCollection{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&rc.RequestID, &rc.CollectionID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &rc)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// RequestCollectionByRequestIDCollectionID retrieves a row from 'public.request_collections' as a [RequestCollection].
//
// Generated from index 'request_collections_pkey'.
func RequestCollectionByRequestIDCollectionID(ctx context.Context, db DB, requestID, collectionID int64) (*RequestCollection, error) {
	// query
	const sqlstr = `SELECT ` +
		`request_id, collection_id ` +
		`FROM public.request_collections ` +
		`WHERE request_id = $1 AND collection_id = $2`
	// run
	logf(sqlstr, requestID, collectionID)
	rc := RequestCollection{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, requestID, collectionID).Scan(&rc.RequestID, &rc.CollectionID); err != nil {
		return nil, logerror(err)
	}
	return &rc, nil
}
