package dbmodel

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	_ "github.com/jackc/pgx/v5/stdlib" // pgx postgres driver
)

// Request represents a row from 'public.requests'.
type Request struct {
	ID        int64     `json:"id" db:"id"`                 // id
	Handler   string    `json:"handler" db:"handler"`       // handler
	Headers   []byte    `json:"headers" db:"headers"`       // headers
	Body      []byte    `json:"body" db:"body"`             // body
	CreatedAt time.Time `json:"created_at" db:"created_at"` // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Request] exists in the database.
func (r *Request) Exists() bool {
	return r._exists
}

// Deleted returns true when the [Request] has been marked for deletion
// from the database.
func (r *Request) Deleted() bool {
	return r._deleted
}

// Insert inserts the [Request] to the database.
func (r *Request) Insert(ctx context.Context, db DB) error {
	switch {
	case r._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case r._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.requests (` +
		`handler, headers, body, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, r.Handler, r.Headers, r.Body, r.CreatedAt)
	if err := db.QueryRow(ctx, sqlstr, r.Handler, r.Headers, r.Body, r.CreatedAt).Scan(&r.ID); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Update updates a [Request] in the database.
func (r *Request) Update(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case r._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.requests SET ` +
		`handler = $1, headers = $2, body = $3, created_at = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, r.Handler, r.Headers, r.Body, r.CreatedAt, r.ID)
	if _, err := db.Exec(ctx, sqlstr, r.Handler, r.Headers, r.Body, r.CreatedAt, r.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Request] to the database.
func (r *Request) Save(ctx context.Context, db DB) error {
	if r.Exists() {
		return r.Update(ctx, db)
	}
	return r.Insert(ctx, db)
}

// Upsert performs an upsert for [Request].
func (r *Request) Upsert(ctx context.Context, db DB) error {
	switch {
	case r._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.requests (` +
		`id, handler, headers, body, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`handler = EXCLUDED.handler, headers = EXCLUDED.headers, body = EXCLUDED.body, created_at = EXCLUDED.created_at `
	// run
	logf(sqlstr, r.ID, r.Handler, r.Headers, r.Body, r.CreatedAt)
	if _, err := db.Exec(ctx, sqlstr, r.ID, r.Handler, r.Headers, r.Body, r.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Delete deletes the [Request] from the database.
func (r *Request) Delete(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return nil
	case r._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.requests ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, r.ID)
	if _, err := db.Exec(ctx, sqlstr, r.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	r._deleted = true
	return nil
}

// RequestsByCreatedAt retrieves a row from 'public.requests' as a [Request].
//
// Generated from index 'idx_requests_created_at'.
func RequestsByCreatedAt(ctx context.Context, db DB, createdAt time.Time) ([]*Request, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, handler, headers, body, created_at ` +
		`FROM public.requests ` +
		`WHERE created_at = $1`
	// run
	logf(sqlstr, createdAt)
	rows, err := db.Query(ctx, sqlstr, createdAt)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Request
	for rows.Next() {
		r := Request{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&r.ID, &r.Handler, &r.Headers, &r.Body, &r.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &r)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// RequestsByCreatedAts retrieves a row from 'public.requests' as a [Request].
//
// Generated from index 'idx_requests_created_at'.
func RequestsByCreatedAts(ctx context.Context, db DB, createdAt []time.Time) ([]*Request, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, handler, headers, body, created_at ` +
		`FROM public.requests ` +
		`WHERE created_at = ANY($1) ` +
		`ORDER BY created_at`
	// run
	logf(sqlstr, createdAt)

	rows, err := db.Query(ctx, sqlstr, createdAt)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Request
	for rows.Next() {
		r := Request{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&r.ID, &r.Handler, &r.Headers, &r.Body, &r.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &r)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// RequestByID retrieves a row from 'public.requests' as a [Request].
//
// Generated from index 'requests_pkey'.
func RequestByID(ctx context.Context, db DB, id int64) (*Request, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, handler, headers, body, created_at ` +
		`FROM public.requests ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	r := Request{
		_exists: true,
	}
	if err := db.QueryRow(ctx, sqlstr, id).Scan(&r.ID, &r.Handler, &r.Headers, &r.Body, &r.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &r, nil
}

// RequestByIDs retrieves a row from 'public.requests' as a [Request].
//
// Generated from index 'requests_pkey'.
func RequestByIDs(ctx context.Context, db DB, id []int64) ([]*Request, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, handler, headers, body, created_at ` +
		`FROM public.requests ` +
		`WHERE id = ANY($1) ` +
		`ORDER BY id`
	// run
	logf(sqlstr, id)

	rows, err := db.Query(ctx, sqlstr, id)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Request
	for rows.Next() {
		r := Request{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&r.ID, &r.Handler, &r.Headers, &r.Body, &r.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &r)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
