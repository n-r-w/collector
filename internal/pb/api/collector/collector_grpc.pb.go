// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: api/collector/collector.proto

package collector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollectionService_CreateTask_FullMethodName       = "/ammo.collector.CollectionService/CreateTask"
	CollectionService_GetCollections_FullMethodName   = "/ammo.collector.CollectionService/GetCollections"
	CollectionService_GetCollection_FullMethodName    = "/ammo.collector.CollectionService/GetCollection"
	CollectionService_CancelCollection_FullMethodName = "/ammo.collector.CollectionService/CancelCollection"
	CollectionService_GetResult_FullMethodName        = "/ammo.collector.CollectionService/GetResult"
)

// CollectionServiceClient is the client API for CollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CollectionService provides methods for managing request content collections
type CollectionServiceClient interface {
	// CreateTask starts a new collection with specified criteria
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	// GetCollections returns all active collections
	GetCollections(ctx context.Context, in *GetCollectionsRequest, opts ...grpc.CallOption) (*GetCollectionsResponse, error)
	// GetCollection returns the status of a specific collection
	GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error)
	// CancelCollection terminates an active collection
	CancelCollection(ctx context.Context, in *CancelCollectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetResult returns the result of a collection as a stream of bytes.
	GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetResultResponse], error)
}

type collectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionServiceClient(cc grpc.ClientConnInterface) CollectionServiceClient {
	return &collectionServiceClient{cc}
}

func (c *collectionServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, CollectionService_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) GetCollections(ctx context.Context, in *GetCollectionsRequest, opts ...grpc.CallOption) (*GetCollectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCollectionsResponse)
	err := c.cc.Invoke(ctx, CollectionService_GetCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCollectionResponse)
	err := c.cc.Invoke(ctx, CollectionService_GetCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) CancelCollection(ctx context.Context, in *CancelCollectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CollectionService_CancelCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetResultResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CollectionService_ServiceDesc.Streams[0], CollectionService_GetResult_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetResultRequest, GetResultResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectionService_GetResultClient = grpc.ServerStreamingClient[GetResultResponse]

// CollectionServiceServer is the server API for CollectionService service.
// All implementations should embed UnimplementedCollectionServiceServer
// for forward compatibility.
//
// CollectionService provides methods for managing request content collections
type CollectionServiceServer interface {
	// CreateTask starts a new collection with specified criteria
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	// GetCollections returns all active collections
	GetCollections(context.Context, *GetCollectionsRequest) (*GetCollectionsResponse, error)
	// GetCollection returns the status of a specific collection
	GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error)
	// CancelCollection terminates an active collection
	CancelCollection(context.Context, *CancelCollectionRequest) (*emptypb.Empty, error)
	// GetResult returns the result of a collection as a stream of bytes.
	GetResult(*GetResultRequest, grpc.ServerStreamingServer[GetResultResponse]) error
}

// UnimplementedCollectionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectionServiceServer struct{}

func (UnimplementedCollectionServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedCollectionServiceServer) GetCollections(context.Context, *GetCollectionsRequest) (*GetCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollections not implemented")
}
func (UnimplementedCollectionServiceServer) GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedCollectionServiceServer) CancelCollection(context.Context, *CancelCollectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCollection not implemented")
}
func (UnimplementedCollectionServiceServer) GetResult(*GetResultRequest, grpc.ServerStreamingServer[GetResultResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedCollectionServiceServer) testEmbeddedByValue() {}

// UnsafeCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionServiceServer will
// result in compilation errors.
type UnsafeCollectionServiceServer interface {
	mustEmbedUnimplementedCollectionServiceServer()
}

func RegisterCollectionServiceServer(s grpc.ServiceRegistrar, srv CollectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollectionService_ServiceDesc, srv)
}

func _CollectionService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_GetCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).GetCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_GetCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).GetCollections(ctx, req.(*GetCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_GetCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).GetCollection(ctx, req.(*GetCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_CancelCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).CancelCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_CancelCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).CancelCollection(ctx, req.(*CancelCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_GetResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetResultRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectionServiceServer).GetResult(m, &grpc.GenericServerStream[GetResultRequest, GetResultResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollectionService_GetResultServer = grpc.ServerStreamingServer[GetResultResponse]

// CollectionService_ServiceDesc is the grpc.ServiceDesc for CollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ammo.collector.CollectionService",
	HandlerType: (*CollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _CollectionService_CreateTask_Handler,
		},
		{
			MethodName: "GetCollections",
			Handler:    _CollectionService_GetCollections_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _CollectionService_GetCollection_Handler,
		},
		{
			MethodName: "CancelCollection",
			Handler:    _CollectionService_CancelCollection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetResult",
			Handler:       _CollectionService_GetResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/collector/collector.proto",
}
