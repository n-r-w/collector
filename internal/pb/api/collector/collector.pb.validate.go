// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/collector/collector.proto

package collector

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTaskRequestMultiError, or nil if none found.
func (m *CreateTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSelectionCriteria() == nil {
		err := CreateTaskRequestValidationError{
			field:  "SelectionCriteria",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSelectionCriteria()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "SelectionCriteria",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "SelectionCriteria",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelectionCriteria()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTaskRequestValidationError{
				field:  "SelectionCriteria",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCompletionCriteria() == nil {
		err := CreateTaskRequestValidationError{
			field:  "CompletionCriteria",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCompletionCriteria()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "CompletionCriteria",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "CompletionCriteria",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompletionCriteria()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTaskRequestValidationError{
				field:  "CompletionCriteria",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTaskRequestMultiError(errors)
	}

	return nil
}

// CreateTaskRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskRequestMultiError) AllErrors() []error { return m }

// CreateTaskRequestValidationError is the validation error returned by
// CreateTaskRequest.Validate if the designated constraints aren't met.
type CreateTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskRequestValidationError) ErrorName() string {
	return "CreateTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskRequestValidationError{}

// Validate checks the field values on MessageSelectionCriteria with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageSelectionCriteria) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageSelectionCriteria with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageSelectionCriteriaMultiError, or nil if none found.
func (m *MessageSelectionCriteria) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageSelectionCriteria) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetHandler()); l < 1 || l > 1024 {
		err := MessageSelectionCriteriaValidationError{
			field:  "Handler",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetHeaderCriteria()) > 100 {
		err := MessageSelectionCriteriaValidationError{
			field:  "HeaderCriteria",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetHeaderCriteria() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageSelectionCriteriaValidationError{
						field:  fmt.Sprintf("HeaderCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageSelectionCriteriaValidationError{
						field:  fmt.Sprintf("HeaderCriteria[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageSelectionCriteriaValidationError{
					field:  fmt.Sprintf("HeaderCriteria[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessageSelectionCriteriaMultiError(errors)
	}

	return nil
}

// MessageSelectionCriteriaMultiError is an error wrapping multiple validation
// errors returned by MessageSelectionCriteria.ValidateAll() if the designated
// constraints aren't met.
type MessageSelectionCriteriaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageSelectionCriteriaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageSelectionCriteriaMultiError) AllErrors() []error { return m }

// MessageSelectionCriteriaValidationError is the validation error returned by
// MessageSelectionCriteria.Validate if the designated constraints aren't met.
type MessageSelectionCriteriaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageSelectionCriteriaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageSelectionCriteriaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageSelectionCriteriaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageSelectionCriteriaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageSelectionCriteriaValidationError) ErrorName() string {
	return "MessageSelectionCriteriaValidationError"
}

// Error satisfies the builtin error interface
func (e MessageSelectionCriteriaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageSelectionCriteria.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageSelectionCriteriaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageSelectionCriteriaValidationError{}

// Validate checks the field values on Header with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Header) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Header with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HeaderMultiError, or nil if none found.
func (m *Header) ValidateAll() error {
	return m.validate(true)
}

func (m *Header) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetHeaderName()); l < 1 || l > 255 {
		err := HeaderValidationError{
			field:  "HeaderName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPattern()); l < 1 || l > 1024 {
		err := HeaderValidationError{
			field:  "Pattern",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HeaderMultiError(errors)
	}

	return nil
}

// HeaderMultiError is an error wrapping multiple validation errors returned by
// Header.ValidateAll() if the designated constraints aren't met.
type HeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeaderMultiError) AllErrors() []error { return m }

// HeaderValidationError is the validation error returned by Header.Validate if
// the designated constraints aren't met.
type HeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderValidationError) ErrorName() string { return "HeaderValidationError" }

// Error satisfies the builtin error interface
func (e HeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderValidationError{}

// Validate checks the field values on CompletionCriteria with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompletionCriteria) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompletionCriteria with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompletionCriteriaMultiError, or nil if none found.
func (m *CompletionCriteria) ValidateAll() error {
	return m.validate(true)
}

func (m *CompletionCriteria) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if d := m.GetTimeLimit(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = CompletionCriteriaValidationError{
				field:  "TimeLimit",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lte := time.Duration(86400*time.Second + 0*time.Nanosecond)
			gt := time.Duration(0*time.Second + 0*time.Nanosecond)

			if dur <= gt || dur > lte {
				err := CompletionCriteriaValidationError{
					field:  "TimeLimit",
					reason: "value must be inside range (0s, 24h0m0s]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if m.GetRequestCountLimit() <= 0 {
		err := CompletionCriteriaValidationError{
			field:  "RequestCountLimit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompletionCriteriaMultiError(errors)
	}

	return nil
}

// CompletionCriteriaMultiError is an error wrapping multiple validation errors
// returned by CompletionCriteria.ValidateAll() if the designated constraints
// aren't met.
type CompletionCriteriaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompletionCriteriaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompletionCriteriaMultiError) AllErrors() []error { return m }

// CompletionCriteriaValidationError is the validation error returned by
// CompletionCriteria.Validate if the designated constraints aren't met.
type CompletionCriteriaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompletionCriteriaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompletionCriteriaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompletionCriteriaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompletionCriteriaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompletionCriteriaValidationError) ErrorName() string {
	return "CompletionCriteriaValidationError"
}

// Error satisfies the builtin error interface
func (e CompletionCriteriaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompletionCriteria.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompletionCriteriaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompletionCriteriaValidationError{}

// Validate checks the field values on CreateTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTaskResponseMultiError, or nil if none found.
func (m *CreateTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	if len(errors) > 0 {
		return CreateTaskResponseMultiError(errors)
	}

	return nil
}

// CreateTaskResponseMultiError is an error wrapping multiple validation errors
// returned by CreateTaskResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskResponseMultiError) AllErrors() []error { return m }

// CreateTaskResponseValidationError is the validation error returned by
// CreateTaskResponse.Validate if the designated constraints aren't met.
type CreateTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskResponseValidationError) ErrorName() string {
	return "CreateTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskResponseValidationError{}

// Validate checks the field values on GetCollectionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsRequestMultiError, or nil if none found.
func (m *GetCollectionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetStatuses()) > 100 {
		err := GetCollectionsRequestValidationError{
			field:  "Statuses",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetStatuses() {
		_, _ = idx, item

		if _, ok := _GetCollectionsRequest_Statuses_NotInLookup[item]; ok {
			err := GetCollectionsRequestValidationError{
				field:  fmt.Sprintf("Statuses[%v]", idx),
				reason: "value must not be in list [0]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetFromTime() == nil {
		err := GetCollectionsRequestValidationError{
			field:  "FromTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetToTime() == nil {
		err := GetCollectionsRequestValidationError{
			field:  "ToTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCollectionsRequestMultiError(errors)
	}

	return nil
}

// GetCollectionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetCollectionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsRequestMultiError) AllErrors() []error { return m }

// GetCollectionsRequestValidationError is the validation error returned by
// GetCollectionsRequest.Validate if the designated constraints aren't met.
type GetCollectionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsRequestValidationError) ErrorName() string {
	return "GetCollectionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsRequestValidationError{}

var _GetCollectionsRequest_Statuses_NotInLookup = map[Status]struct{}{
	0: {},
}

// Validate checks the field values on GetCollectionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsResponseMultiError, or nil if none found.
func (m *GetCollectionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCollectionsResponseValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCollectionsResponseValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCollectionsResponseValidationError{
					field:  fmt.Sprintf("Collections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCollectionsResponseMultiError(errors)
	}

	return nil
}

// GetCollectionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetCollectionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsResponseMultiError) AllErrors() []error { return m }

// GetCollectionsResponseValidationError is the validation error returned by
// GetCollectionsResponse.Validate if the designated constraints aren't met.
type GetCollectionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsResponseValidationError) ErrorName() string {
	return "GetCollectionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsResponseValidationError{}

// Validate checks the field values on GetCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionRequestMultiError, or nil if none found.
func (m *GetCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	if len(errors) > 0 {
		return GetCollectionRequestMultiError(errors)
	}

	return nil
}

// GetCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by GetCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionRequestMultiError) AllErrors() []error { return m }

// GetCollectionRequestValidationError is the validation error returned by
// GetCollectionRequest.Validate if the designated constraints aren't met.
type GetCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionRequestValidationError) ErrorName() string {
	return "GetCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionRequestValidationError{}

// Validate checks the field values on GetCollectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionResponseMultiError, or nil if none found.
func (m *GetCollectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCollectionResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCollectionResponseValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCollectionResponseValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCollectionResponseMultiError(errors)
	}

	return nil
}

// GetCollectionResponseMultiError is an error wrapping multiple validation
// errors returned by GetCollectionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionResponseMultiError) AllErrors() []error { return m }

// GetCollectionResponseValidationError is the validation error returned by
// GetCollectionResponse.Validate if the designated constraints aren't met.
type GetCollectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionResponseValidationError) ErrorName() string {
	return "GetCollectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionResponseValidationError{}

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Task) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaskMultiError, or nil if none found.
func (m *Task) ValidateAll() error {
	return m.validate(true)
}

func (m *Task) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessageSelection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "MessageSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "MessageSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageSelection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskValidationError{
				field:  "MessageSelection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompletion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "Completion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "Completion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompletion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskValidationError{
				field:  "Completion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskMultiError(errors)
	}

	return nil
}

// TaskMultiError is an error wrapping multiple validation errors returned by
// Task.ValidateAll() if the designated constraints aren't met.
type TaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskMultiError) AllErrors() []error { return m }

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}

// Validate checks the field values on Collection with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Collection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Collection with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CollectionMultiError, or
// nil if none found.
func (m *Collection) ValidateAll() error {
	return m.validate(true)
}

func (m *Collection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CollectionId

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequestCount

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionValidationError{
				field:  "CompletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorMessage

	// no validation rules for ErrorCode

	if len(errors) > 0 {
		return CollectionMultiError(errors)
	}

	return nil
}

// CollectionMultiError is an error wrapping multiple validation errors
// returned by Collection.ValidateAll() if the designated constraints aren't met.
type CollectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionMultiError) AllErrors() []error { return m }

// CollectionValidationError is the validation error returned by
// Collection.Validate if the designated constraints aren't met.
type CollectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionValidationError) ErrorName() string { return "CollectionValidationError" }

// Error satisfies the builtin error interface
func (e CollectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionValidationError{}

// Validate checks the field values on CancelCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelCollectionRequestMultiError, or nil if none found.
func (m *CancelCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCollectionId() <= 0 {
		err := CancelCollectionRequestValidationError{
			field:  "CollectionId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelCollectionRequestMultiError(errors)
	}

	return nil
}

// CancelCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by CancelCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelCollectionRequestMultiError) AllErrors() []error { return m }

// CancelCollectionRequestValidationError is the validation error returned by
// CancelCollectionRequest.Validate if the designated constraints aren't met.
type CancelCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelCollectionRequestValidationError) ErrorName() string {
	return "CancelCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelCollectionRequestValidationError{}

// Validate checks the field values on GetResultRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResultRequestMultiError, or nil if none found.
func (m *GetResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCollectionId() <= 0 {
		err := GetResultRequestValidationError{
			field:  "CollectionId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetResultRequestMultiError(errors)
	}

	return nil
}

// GetResultRequestMultiError is an error wrapping multiple validation errors
// returned by GetResultRequest.ValidateAll() if the designated constraints
// aren't met.
type GetResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResultRequestMultiError) AllErrors() []error { return m }

// GetResultRequestValidationError is the validation error returned by
// GetResultRequest.Validate if the designated constraints aren't met.
type GetResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResultRequestValidationError) ErrorName() string { return "GetResultRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResultRequestValidationError{}

// Validate checks the field values on GetResultResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResultResponseMultiError, or nil if none found.
func (m *GetResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return GetResultResponseMultiError(errors)
	}

	return nil
}

// GetResultResponseMultiError is an error wrapping multiple validation errors
// returned by GetResultResponse.ValidateAll() if the designated constraints
// aren't met.
type GetResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResultResponseMultiError) AllErrors() []error { return m }

// GetResultResponseValidationError is the validation error returned by
// GetResultResponse.Validate if the designated constraints aren't met.
type GetResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResultResponseValidationError) ErrorName() string {
	return "GetResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResultResponseValidationError{}
